{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","useState","setDomain","currentUrl","setCurrentUrl","headlines","setHeadlines","loading","setLoading","classes","makeStyles","theme","root","flexGrow","useStyles","useEffect","chrome","tabs","query","active","currentWindow","url","URL","domain","hostname","currenturl","toString","detectFakeNews","a","axios","get","params","q","language","apiKey","then","results","data","articles","slice","console","log","catch","error","setTimeout","className","style","width","height","AppBar","position","Toolbar","variant","Link","color","href","link","underline","Box","display","flexDirection","Icon","alt","src","pl","Typography","Container","fixed","mt","align","map","headline","onClick","window","open","title","Boolean","location","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2LAAAA,EAAOC,QAAU,IAA0B,kC,0OCqH5BC,MAnGf,SAAaC,GAAO,IAAD,EAEWC,mBAAS,IAFpB,mBAEFC,GAFE,aAGmBD,mBAAS,IAH5B,mBAGVE,EAHU,KAGEC,EAHF,OAIiBH,mBAAS,IAJ1B,mBAIVI,EAJU,KAICC,EAJD,OAKaL,oBAAS,GALtB,mBAKVM,EALU,KAKDC,EALC,KAYXC,EALYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,MAGEC,GAIhBC,qBAAU,WACRC,OAAOC,KAAKC,MACV,CAACC,QAAQ,EAAMC,eAAe,IAC9B,SAAAH,GACE,IAAMI,EAAM,IAAIC,IAAIL,EAAK,GAAGI,KACtBE,EAASF,EAAIG,SACbC,EAAaJ,EAAIK,WACvBxB,EAAUqB,GACVnB,EAAcqB,GACdE,EAAeJ,QAOnB,IAGF,IAAMI,EAAc,uCAAG,WAAOT,GAAP,SAAAU,EAAA,sEACFC,IAChBC,IAAI,oCAAqC,CACtCC,OAAQ,CACNC,EAAGd,EACHe,SAAU,KACVC,OA3BM,sCA6BXC,MAAK,SAAAC,GACF9B,EAAa8B,EAAQC,KAAKC,SAASC,MAAM,EAAG,IAC5CC,QAAQC,IAAIL,MACfM,OAAM,SAAAC,GACHH,QAAQC,IAAI,+BAAgCE,MAZ7B,cAcnBC,YAAW,WACPpC,GAAW,KACZ,KAhBgB,2CAAH,sDAoBpB,OACE,yBAAKqC,UAAWpC,EAAQG,KAAMkC,MAAO,CAACC,MAAM,QAASC,OAAQ,UAE3D,kBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,CAASC,QAAQ,SACjB,kBAACC,EAAA,EAAD,CAAMC,MAAM,UAAUC,KAAK,IAAIV,UAAWpC,EAAQ+C,KAAMC,UAAU,QAChE,kBAACC,EAAA,EAAD,CAAKC,QAAQ,OAAOC,cAAc,OAChC,kBAACF,EAAA,EAAD,KAAM,kBAACG,EAAA,EAAD,KAAM,yBAAKC,IAAI,GAAGC,IAAI,aAAahB,MAAM,OAAOC,OAAO,WAC7D,kBAACU,EAAA,EAAD,CAAKM,GAAI,GACT,kBAACC,EAAA,EAAD,CACEb,QAAQ,YACRO,QAAQ,SAFV,yBAUN,kBAACO,EAAA,EAAD,CAAWC,OAAK,GACd,kBAACT,EAAA,EAAD,CAAKU,GAAI,IACT,kBAACH,EAAA,EAAD,CAAYb,QAAQ,KAAKiB,MAAM,UAA/B,kBACA,kBAACJ,EAAA,EAAD,CAAYb,QAAQ,YAAYiB,MAAM,UAAUlE,GAE/CI,EACGF,EAAUiE,KACV,SAAAC,GAAQ,OACR,kBAACN,EAAA,EAAD,CACApB,UAAU,OACVO,QAAQ,YACRoB,QAAS,WAAKC,OAAOC,KAAKH,EAASlD,OACjCkD,EAASI,UAIX,yBAAKZ,IAAI,4BAA4BD,IAAI,kBChGjCc,QACW,cAA7BH,OAAOI,SAASrD,UAEe,UAA7BiD,OAAOI,SAASrD,UAEhBiD,OAAOI,SAASrD,SAASsD,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEd9C,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAM8C,c","file":"static/js/main.90ccfbcc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/* global chrome */\n\nimport React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AppBar from '@material-ui/core/AppBar'\nimport Typography from '@material-ui/core/Typography';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@material-ui/core/Icon';\nimport Box from '@material-ui/core/Box';\nimport Link from '@material-ui/core/Link';\nimport Container from '@material-ui/core/Container';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport axios from 'axios';\nimport { makeStyles } from '@material-ui/core';\n\n\nfunction App(props){\n\n  const [domain, setDomain] = useState('');\n  const [currentUrl, setCurrentUrl] = useState('');\n  const [headlines, setHeadlines] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    }\n  }));\n  const classes = useStyles();\n\n  const API_KEY = '0077e63429c544a7a3e19bdaea2ec806';\n\n  useEffect(() => {\n    chrome.tabs.query(\n      {active: true, currentWindow: true},\n      tabs => {\n        const url = new URL(tabs[0].url);\n        const domain = url.hostname;\n        const currenturl = url.toString();\n        setDomain(domain);\n        setCurrentUrl(currenturl);\n        detectFakeNews(domain);\n      });\n    // const domain = \"www.digitalocean.com\";\n    // const currenturl = \"https://www.digitalocean.com/community/tutorials/react-axios-react\";\n    // setDomain(domain);\n    // setCurrentUrl(currenturl);\n    // detectFakeNews(domain);\n  },[]);\n\n\n  const detectFakeNews = async (query) => {\n    const data = await axios\n      .get('https://newsapi.org/v2/everything', {\n          params: {\n            q: query,\n            language: 'en',\n            apiKey: API_KEY\n          }})\n      .then(results=> {\n          setHeadlines(results.data.articles.slice(0, 5));\n          console.log(results);})\n      .catch(error => {\n          console.log('Error in obtaining headlines', error);\n      });\n      setTimeout(function() {\n          setLoading(true);\n      }, 5000);\n  }\n  \n  \n  return (\n    <div className={classes.root} style={{width:\"500px\", height: \"600px\"}}>\n\n      <AppBar position=\"static\">\n        <Toolbar variant=\"dense\">\n        <Link color=\"inherit\" href=\"#\" className={classes.link} underline=\"none\">\n          <Box display=\"flex\" flexDirection=\"row\">\n            <Box ><Icon><img alt=\"\" src=\"/logo1.png\" width=\"30px\" height=\"30px\" /></Icon></Box>\n            <Box pl={1} >\n            <Typography \n              variant=\"subtitle1\"\n              display=\"block\"\n            >FakeNewsDetector\n            </Typography>\n            </Box>\n          </Box>\n        </Link>\n        </Toolbar>\n      </AppBar>\n      <Container fixed >\n        <Box mt={2}></Box>\n        <Typography variant=\"h6\" align=\"center\">Top-Headlines:</Typography>\n        <Typography variant=\"subtitle1\" align=\"center\">{currentUrl}</Typography>\n\n        {loading ? (\n            headlines.map(\n            headline => (\n            <Typography\n            className=\"link\"\n            variant=\"subtitle1\" \n            onClick={()=>{window.open(headline.url)}}\n            >{headline.title}\n            </Typography>)\n            )\n          ) : (\n            <img src=\"./assets/img/loading3.gif\" alt=\"loading...\" />\n          )\n        }\n        \n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}